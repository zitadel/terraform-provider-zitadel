/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zitadel/text.proto

package text

import (
	context "context"
	fmt "fmt"
	textpb "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/text"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	 "github.com/hashicorp/terraform-plugin-framework/attr"
	 "github.com/hashicorp/terraform-plugin-framework/diag"
	//github_com_hashicorp_terraform_plugin_framework_provider "github.com/hashicorp/terraform-plugin-framework/provider"
	 "github.com/hashicorp/terraform-plugin-framework/types"
	 github_com_hashicorp_terraform_plugin_framework_resource_schema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	 //"github.com/hashicorp/terraform-plugin-go/tftypes"
"github.com/hashicorp/terraform-plugin-framework/provider/schema"	
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenSchemaLoginCustomText returns schema.Schema definition for LoginCustomText
func GenSchemaLoginCustomText(ctx context.Context) (schema.Schema, diag.Diagnostics) {
	return schema.Schema{Attributes: map[string]schema.Attribute{
		"email_verification_done_text": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"login_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
			Description: "",
			Optional:    true,
		},
		"email_verification_text": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"code_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"resend_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
			Description: "",
			Optional:    true,
		},
		"external_registration_user_overview_text": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"back_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"email_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"firstname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"language_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"lastname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"nickname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"phone_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_and_privacy_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"username_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
			Description: "",
			Optional:    true,
		},
		"external_user_not_found_text": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"auto_register_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"link_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_and_privacy_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
			Description: "",
			Optional:    true,
		},
		"footer_text": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"help": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_policy": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"support_email": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
			Description: "",
			Optional:    true,
		},
		"id": github_com_hashicorp_terraform_plugin_framework_resource_schema.StringAttribute{
			Computed: true,
		},
		"init_mfa_done_text": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
			Description: "",
			Optional:    true,
		},
		"init_mfa_otp_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"code_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description_otp": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"secret_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"init_mfa_prompt_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"otp_option": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"skip_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"u2f_option": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"init_mfa_u2f_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"error_retry": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"not_supported": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"register_token_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"token_name_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"init_password_done_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"init_password_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"code_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"new_password_confirm_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"new_password_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"resend_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"initialize_done_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"initialize_user_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"code_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"new_password_confirm_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"new_password_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"resend_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"language": schema.StringAttribute{
			Required: true,
		},
		"linking_user_done_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"linking_user_prompt_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"link_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"other_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"login_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description_linking_process": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"external_user_description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"login_name_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"login_name_placeholder": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"register_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title_linking_process": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"user_must_be_member_of_org": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"user_name_placeholder": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"logout_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"login_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"mfa_providers_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"choose_other": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"otp": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"u2f": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"org_id": schema.StringAttribute{
			Required: true,
		},
		"password_change_done_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"password_change_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"expired_description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"new_password_confirm_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"new_password_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"old_password_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"password_reset_done_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"password_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"back_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"confirmation": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"has_lowercase": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"has_number": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"has_symbol": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"has_uppercase": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"min_length": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"password_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"reset_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"passwordless_prompt_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description_init": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"passwordless_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"skip_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"passwordless_registration_done_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description_close": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"passwordless_registration_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"error_retry": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"not_supported": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"register_token_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"token_name_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"passwordless_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"error_retry": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"login_with_pw_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"not_supported": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"validate_token_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"registration_option_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"external_login_description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"login_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"user_name_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"registration_org_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"email_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"firstname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"lastname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"orgname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"password_confirm_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"password_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"save_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_and_privacy_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"username_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"registration_user_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"back_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description_org_register": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"email_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"firstname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"gender_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"language_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"lastname_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"password_confirm_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"password_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"privacy_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_and_privacy_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_confirm": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"tos_link_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"username_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"select_account_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description_linking_process": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"other_user": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"session_state_active": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"session_state_inactive": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title_linking_process": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"user_must_be_member_of_org": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"success_login_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"auto_redirect_description": schema.StringAttribute{
					Description: "Text to describe that auto-redirect should happen after successful login",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"redirected_description": schema.StringAttribute{
					Description: "Text to describe that the window can be closed after redirect",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"username_change_done_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"username_change_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"cancel_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"username_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"verify_mfa_otp_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"code_label": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"next_button_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
		"verify_mfa_u2f_text": schema.SingleNestedAttribute{
			Description: "",
			Optional:    true,
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"error_retry": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"not_supported": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"title": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
				"validate_token_text": schema.StringAttribute{
					Description: "",
					Optional:    true,
				},
			},
		},
	}}, nil
}

// GenSchemaMessageCustomText returns schema.Schema definition for MessageCustomText
func GenSchemaMessageCustomText(ctx context.Context) (schema.Schema, diag.Diagnostics) {
	return schema.Schema{Attributes: map[string]schema.Attribute{
		"button_text": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"footer_text": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"greeting": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"id": github_com_hashicorp_terraform_plugin_framework_resource_schema.StringAttribute{
			Computed: true,
		},
		"language": schema.StringAttribute{
			Required: true,
		},
		"org_id": schema.StringAttribute{
			Required: true,
		},
		"pre_header": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"subject": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"text": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"title": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}, nil
}


// readStringAttribute is a helper to read a string attribute from a types.Object and assign it to a target string pointer.
func readStringAttribute(diags diag.Diagnostics, obj types.Object, basePath, attrName string, target *string) diag.Diagnostics {
	attrs := obj.Attributes()
	a, ok := attrs[attrName]
	if !ok {
		diags.Append(attrReadMissingDiag{Path: fmt.Sprintf("%s.%s", basePath, attrName)})
		return diags
	}
	v, ok := a.(types.String)
	if !ok {
		diags.Append(attrReadConversionFailureDiag{
			Path: fmt.Sprintf("%s.%s", basePath, attrName),
			Type: "github.com/hashicorp/terraform-plugin-framework/types.String",
		})
		return diags
	}
	if !v.IsNull() && !v.IsUnknown() {
		*target = v.ValueString()
	} else {
		*target = ""
	}
	return diags
}

// CopyLoginCustomTextFromTerraform copies contents of the source Terraform object into a target struct.
func CopyLoginCustomTextFromTerraform(_ context.Context, tf types.Object, obj *textpb.LoginCustomText) diag.Diagnostics {
	var diags diag.Diagnostics

	// Process email_verification_done_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["email_verification_done_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.email_verification_done_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.email_verification_done_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.EmailVerificationDoneText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.EmailVerificationDoneText = &textpb.EmailVerificationDoneScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_done_text", "cancel_button_text", &obj.EmailVerificationDoneText.CancelButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_done_text", "description", &obj.EmailVerificationDoneText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_done_text", "login_button_text", &obj.EmailVerificationDoneText.LoginButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_done_text", "next_button_text", &obj.EmailVerificationDoneText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_done_text", "title", &obj.EmailVerificationDoneText.Title)
				}
			}
		}
	}

	// Process email_verification_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["email_verification_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.email_verification_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.email_verification_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.EmailVerificationText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.EmailVerificationText = &textpb.EmailVerificationScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_text", "code_label", &obj.EmailVerificationText.CodeLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_text", "description", &obj.EmailVerificationText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_text", "next_button_text", &obj.EmailVerificationText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_text", "resend_button_text", &obj.EmailVerificationText.ResendButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.email_verification_text", "title", &obj.EmailVerificationText.Title)
				}
			}
		}
	}

	// Process external_registration_user_overview_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["external_registration_user_overview_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.external_registration_user_overview_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.external_registration_user_overview_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.ExternalRegistrationUserOverviewText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.ExternalRegistrationUserOverviewText = &textpb.ExternalRegistrationUserOverviewScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "back_button_text", &obj.ExternalRegistrationUserOverviewText.BackButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "description", &obj.ExternalRegistrationUserOverviewText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "email_label", &obj.ExternalRegistrationUserOverviewText.EmailLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "firstname_label", &obj.ExternalRegistrationUserOverviewText.FirstnameLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "language_label", &obj.ExternalRegistrationUserOverviewText.LanguageLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "lastname_label", &obj.ExternalRegistrationUserOverviewText.LastnameLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "next_button_text", &obj.ExternalRegistrationUserOverviewText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "nickname_label", &obj.ExternalRegistrationUserOverviewText.NicknameLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "phone_label", &obj.ExternalRegistrationUserOverviewText.PhoneLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "privacy_confirm", &obj.ExternalRegistrationUserOverviewText.PrivacyConfirm)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "privacy_link_text", &obj.ExternalRegistrationUserOverviewText.PrivacyLinkText)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "title", &obj.ExternalRegistrationUserOverviewText.Title)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "tos_and_privacy_label", &obj.ExternalRegistrationUserOverviewText.TosAndPrivacyLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "tos_confirm", &obj.ExternalRegistrationUserOverviewText.TosConfirm)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "tos_link_text", &obj.ExternalRegistrationUserOverviewText.TosLinkText)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_registration_user_overview_text", "username_label", &obj.ExternalRegistrationUserOverviewText.UsernameLabel)
				}
			}
		}
	}

	// Process external_user_not_found_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["external_user_not_found_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.external_user_not_found_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.external_user_not_found_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.ExternalUserNotFoundText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.ExternalUserNotFoundText = &textpb.ExternalUserNotFoundScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "auto_register_button_text", &obj.ExternalUserNotFoundText.AutoRegisterButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "description", &obj.ExternalUserNotFoundText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "link_button_text", &obj.ExternalUserNotFoundText.LinkButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "privacy_confirm", &obj.ExternalUserNotFoundText.PrivacyConfirm)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "privacy_link_text", &obj.ExternalUserNotFoundText.PrivacyLinkText)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "title", &obj.ExternalUserNotFoundText.Title)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "tos_and_privacy_label", &obj.ExternalUserNotFoundText.TosAndPrivacyLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "tos_confirm", &obj.ExternalUserNotFoundText.TosConfirm)
					diags = readStringAttribute(diags, v, "LoginCustomText.external_user_not_found_text", "tos_link_text", &obj.ExternalUserNotFoundText.TosLinkText)
				}
			}
		}
	}

	// Process footer_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["footer_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.footer_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.footer_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.FooterText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.FooterText = &textpb.FooterText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.footer_text", "help", &obj.FooterText.Help)
					diags = readStringAttribute(diags, v, "LoginCustomText.footer_text", "privacy_policy", &obj.FooterText.PrivacyPolicy)
					diags = readStringAttribute(diags, v, "LoginCustomText.footer_text", "support_email", &obj.FooterText.SupportEmail)
					diags = readStringAttribute(diags, v, "LoginCustomText.footer_text", "tos", &obj.FooterText.Tos)
				}
			}
		}
	}

	// Process init_mfa_done_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["init_mfa_done_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.init_mfa_done_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.init_mfa_done_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.InitMfaDoneText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.InitMfaDoneText = &textpb.InitMFADoneScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_done_text", "cancel_button_text", &obj.InitMfaDoneText.CancelButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_done_text", "description", &obj.InitMfaDoneText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_done_text", "next_button_text", &obj.InitMfaDoneText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_done_text", "title", &obj.InitMfaDoneText.Title)
				}
			}
		}
	}

	// Process init_mfa_otp_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["init_mfa_otp_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.init_mfa_otp_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.init_mfa_otp_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.InitMfaOtpText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.InitMfaOtpText = &textpb.InitMFAOTPScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_otp_text", "cancel_button_text", &obj.InitMfaOtpText.CancelButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_otp_text", "code_label", &obj.InitMfaOtpText.CodeLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_otp_text", "description", &obj.InitMfaOtpText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_otp_text", "description_otp", &obj.InitMfaOtpText.DescriptionOtp)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_otp_text", "next_button_text", &obj.InitMfaOtpText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_otp_text", "secret_label", &obj.InitMfaOtpText.SecretLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_otp_text", "title", &obj.InitMfaOtpText.Title)
				}
			}
		}
	}

	// Process init_mfa_prompt_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["init_mfa_prompt_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.init_mfa_prompt_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.init_mfa_prompt_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.InitMfaPromptText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.InitMfaPromptText = &textpb.InitMFAPromptScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_prompt_text", "description", &obj.InitMfaPromptText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_prompt_text", "next_button_text", &obj.InitMfaPromptText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_prompt_text", "otp_option", &obj.InitMfaPromptText.OtpOption)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_prompt_text", "skip_button_text", &obj.InitMfaPromptText.SkipButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_prompt_text", "title", &obj.InitMfaPromptText.Title)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_prompt_text", "u2f_option", &obj.InitMfaPromptText.U2FOption)
				}
			}
		}
	}

	// Process init_mfa_u2f_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["init_mfa_u2f_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.init_mfa_u2f_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.init_mfa_u2f_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.InitMfaU2FText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.InitMfaU2FText = &textpb.InitMFAU2FScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_u2f_text", "description", &obj.InitMfaU2FText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_u2f_text", "error_retry", &obj.InitMfaU2FText.ErrorRetry)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_u2f_text", "not_supported", &obj.InitMfaU2FText.NotSupported)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_u2f_text", "register_token_button_text", &obj.InitMfaU2FText.RegisterTokenButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_u2f_text", "title", &obj.InitMfaU2FText.Title)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_mfa_u2f_text", "token_name_label", &obj.InitMfaU2FText.TokenNameLabel)
				}
			}
		}
	}

	// Process init_password_done_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["init_password_done_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.init_password_done_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.init_password_done_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.InitPasswordDoneText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.InitPasswordDoneText = &textpb.InitPasswordDoneScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_done_text", "cancel_button_text", &obj.InitPasswordDoneText.CancelButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_done_text", "description", &obj.InitPasswordDoneText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_done_text", "next_button_text", &obj.InitPasswordDoneText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_done_text", "title", &obj.InitPasswordDoneText.Title)
				}
			}
		}
	}

	// Process init_password_text
	{
		attrs := tf.Attributes()
		a, ok := attrs["init_password_text"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginCustomText.init_password_text"})
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: "LoginCustomText.init_password_text",
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
			} else {
				obj.InitPasswordText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.InitPasswordText = &textpb.InitPasswordScreenText{}
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_text", "code_label", &obj.InitPasswordText.CodeLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_text", "description", &obj.InitPasswordText.Description)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_text", "new_password_confirm_label", &obj.InitPasswordText.NewPasswordConfirmLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_text", "new_password_label", &obj.InitPasswordText.NewPasswordLabel)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_text", "next_button_text", &obj.InitPasswordText.NextButtonText)
					diags = readStringAttribute(diags, v, "LoginCustomText.init_password_text", "title", &obj.InitPasswordText.Title)
				}
			}
		}
	}

	// Process remaining fields (select_account_text, success_login_text, etc.)
	{
		attrs := tf.Attributes()
		for _, field := range []string{
			"select_account_text",
			"success_login_text",
			"username_change_done_text",
			"username_change_text",
			"verify_mfa_otp_text",
			"verify_mfa_u2f_text",
		} {
			a, ok := attrs[field]
			if !ok {
				diags.Append(attrReadMissingDiag{fmt.Sprintf("LoginCustomText.%s", field)})
				continue
			}
			v, ok := a.(types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{
					Path: fmt.Sprintf("LoginCustomText.%s", field),
					Type: "github.com/hashicorp/terraform-plugin-framework/types.Object",
				})
				continue
			}
			switch field {
			case "select_account_text":
				obj.SelectAccountText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.SelectAccountText = &textpb.SelectAccountScreenText{}
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "description", &obj.SelectAccountText.Description)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "description_linking_process", &obj.SelectAccountText.DescriptionLinkingProcess)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "other_user", &obj.SelectAccountText.OtherUser)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "session_state_active", &obj.SelectAccountText.SessionStateActive)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "session_state_inactive", &obj.SelectAccountText.SessionStateInactive)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "title", &obj.SelectAccountText.Title)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "title_linking_process", &obj.SelectAccountText.TitleLinkingProcess)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "user_must_be_member_of_org", &obj.SelectAccountText.UserMustBeMemberOfOrg)
				}
			case "success_login_text":
				obj.SuccessLoginText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.SuccessLoginText = &textpb.SuccessLoginScreenText{}
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "auto_redirect_description", &obj.SuccessLoginText.AutoRedirectDescription)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "next_button_text", &obj.SuccessLoginText.NextButtonText)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "redirected_description", &obj.SuccessLoginText.RedirectedDescription)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "title", &obj.SuccessLoginText.Title)
				}
			case "username_change_done_text":
				obj.UsernameChangeDoneText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.UsernameChangeDoneText = &textpb.UsernameChangeDoneScreenText{}
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "description", &obj.UsernameChangeDoneText.Description)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "next_button_text", &obj.UsernameChangeDoneText.NextButtonText)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "title", &obj.UsernameChangeDoneText.Title)
				}
			case "username_change_text":
				obj.UsernameChangeText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.UsernameChangeText = &textpb.UsernameChangeScreenText{}
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "cancel_button_text", &obj.UsernameChangeText.CancelButtonText)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "description", &obj.UsernameChangeText.Description)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "next_button_text", &obj.UsernameChangeText.NextButtonText)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "title", &obj.UsernameChangeText.Title)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "username_label", &obj.UsernameChangeText.UsernameLabel)
				}
			case "verify_mfa_otp_text":
				obj.VerifyMfaOtpText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.VerifyMfaOtpText = &textpb.VerifyMFAOTPScreenText{}
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "code_label", &obj.VerifyMfaOtpText.CodeLabel)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "description", &obj.VerifyMfaOtpText.Description)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "next_button_text", &obj.VerifyMfaOtpText.NextButtonText)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "title", &obj.VerifyMfaOtpText.Title)
				}
			case "verify_mfa_u2f_text":
				obj.VerifyMfaU2FText = nil
				if !v.IsNull() && !v.IsUnknown() {
					obj.VerifyMfaU2FText = &textpb.VerifyMFAU2FScreenText{}
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "description", &obj.VerifyMfaU2FText.Description)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "error_retry", &obj.VerifyMfaU2FText.ErrorRetry)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "not_supported", &obj.VerifyMfaU2FText.NotSupported)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "title", &obj.VerifyMfaU2FText.Title)
					diags = readStringAttribute(diags, v, fmt.Sprintf("LoginCustomText.%s", field), "validate_token_text", &obj.VerifyMfaU2FText.ValidateTokenText)
				}
			}
		}
	}

	return diags
}

// CopyMessageCustomTextFromTerraform copies contents of the source Terraform object into a target struct.
func CopyMessageCustomTextFromTerraform(_ context.Context, tf types.Object, obj *textpb.MessageCustomText) diag.Diagnostics {
	var diags diag.Diagnostics

	for _, field := range []string{"button_text", "footer_text", "greeting", "pre_header", "subject", "text", "title"} {
		diags = readStringAttribute(diags, tf, "MessageCustomText", field, func() *string {
			switch field {
			case "button_text":
				return &obj.ButtonText
			case "footer_text":
				return &obj.FooterText
			case "greeting":
				return &obj.Greeting
			case "pre_header":
				return &obj.PreHeader
			case "subject":
				return &obj.Subject
			case "text":
				return &obj.Text
			case "title":
				return &obj.Title
			default:
				return nil
			}
		}())
	}

	return diags
}

// CopyMessageCustomTextToTerraform copies contents of the source struct into a target Terraform object.
func CopyMessageCustomTextToTerraform(_ context.Context, obj *textpb.MessageCustomText, tf *types.Object) diag.Diagnostics {
	var diags diag.Diagnostics

	// Define the attribute types for the object (all fields are strings)
	attrTypes := map[string]attr.Type{
		"button_text": types.StringType,
		"footer_text": types.StringType,
		"greeting":    types.StringType,
		"pre_header":  types.StringType,
		"subject":     types.StringType,
		"text":        types.StringType,
		"title":       types.StringType,
	}

	// Initialize the attributes map
	attrs := make(map[string]attr.Value)

	// Set each field
	for _, field := range []string{"button_text", "footer_text", "greeting", "pre_header", "subject", "text", "title"} {
		var value string
		switch field {
		case "button_text":
			value = obj.ButtonText
		case "footer_text":
			value = obj.FooterText
		case "greeting":
			value = obj.Greeting
		case "pre_header":
			value = obj.PreHeader
		case "subject":
			value = obj.Subject
		case "text":
			value = obj.Text
		case "title":
			value = obj.Title
		}
		if value == "" {
			attrs[field] = types.StringNull()
		} else {
			attrs[field] = types.StringValue(value)
		}
	}

	// Create the new object
	newObj, objDiags := types.ObjectValue(attrTypes, attrs)
	diags.Append(objDiags...)
	if diags.HasError() {
		return diags
	}

	// Assign the new object to the pointer
	*tf = newObj

	return diags
}

// CopyLoginCustomTextToTerraform copies contents of the source struct into a target Terraform object.
func CopyLoginCustomTextToTerraform(_ context.Context, obj *textpb.LoginCustomText, tf *types.Object) diag.Diagnostics {
	var diags diag.Diagnostics

	// Define attribute types for the top-level object
	attrTypes := map[string]attr.Type{
		"email_verification_done_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"cancel_button_text": types.StringType,
				"description":        types.StringType,
				"login_button_text":  types.StringType,
				"next_button_text":   types.StringType,
				"title":              types.StringType,
			},
		},
		"email_verification_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"code_label":        types.StringType,
				"description":       types.StringType,
				"next_button_text":  types.StringType,
				"resend_button_text": types.StringType,
				"title":             types.StringType,
			},
		},
		"external_registration_user_overview_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"back_button_text":      types.StringType,
				"description":           types.StringType,
				"email_label":           types.StringType,
				"firstname_label":       types.StringType,
				"language_label":        types.StringType,
				"lastname_label":        types.StringType,
				"next_button_text":      types.StringType,
				"nickname_label":        types.StringType,
				"phone_label":           types.StringType,
				"privacy_confirm":       types.StringType,
				"privacy_link_text":     types.StringType,
				"title":                 types.StringType,
				"tos_and_privacy_label": types.StringType,
				"tos_confirm":           types.StringType,
				"tos_link_text":         types.StringType,
				"username_label":        types.StringType,
			},
		},
		"external_user_not_found_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"auto_register_button_text": types.StringType,
				"description":               types.StringType,
				"link_button_text":          types.StringType,
				"privacy_confirm":           types.StringType,
				"privacy_link_text":         types.StringType,
				"title":                     types.StringType,
				"tos_and_privacy_label":     types.StringType,
				"tos_confirm":               types.StringType,
				"tos_link_text":             types.StringType,
			},
		},
		"footer_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"help":           types.StringType,
				"privacy_policy": types.StringType,
				"support_email":  types.StringType,
				"tos":            types.StringType,
			},
		},
		"init_mfa_done_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"cancel_button_text": types.StringType,
				"description":        types.StringType,
				"next_button_text":   types.StringType,
				"title":              types.StringType,
			},
		},
		"init_mfa_otp_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"cancel_button_text": types.StringType,
				"code_label":         types.StringType,
				"description":        types.StringType,
				"description_otp":    types.StringType,
				"next_button_text":   types.StringType,
				"secret_label":       types.StringType,
				"title":              types.StringType,
			},
		},
		"init_mfa_prompt_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"description":       types.StringType,
				"next_button_text":  types.StringType,
				"otp_option":        types.StringType,
				"skip_button_text":  types.StringType,
				"title":             types.StringType,
				"u2f_option":        types.StringType,
			},
		},
		"init_mfa_u2f_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"description":              types.StringType,
				"error_retry":              types.StringType,
				"not_supported":            types.StringType,
				"register_token_button_text": types.StringType,
				"title":                    types.StringType,
				"token_name_label":         types.StringType,
			},
		},
		"init_password_done_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"cancel_button_text": types.StringType,
				"description":        types.StringType,
				"next_button_text":   types.StringType,
				"title":              types.StringType,
			},
		},
		"init_password_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"code_label":              types.StringType,
				"description":             types.StringType,
				"new_password_confirm_label": types.StringType,
				"new_password_label":      types.StringType,
				"next_button_text":        types.StringType,
				"title":                   types.StringType,
			},
		},
		"select_account_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"description":                types.StringType,
				"description_linking_process": types.StringType,
				"other_user":                 types.StringType,
				"session_state_active":       types.StringType,
				"session_state_inactive":     types.StringType,
				"title":                      types.StringType,
				"title_linking_process":      types.StringType,
				"user_must_be_member_of_org": types.StringType,
			},
		},
		"success_login_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"auto_redirect_description": types.StringType,
				"next_button_text":          types.StringType,
				"redirected_description":    types.StringType,
				"title":                     types.StringType,
			},
		},
		"username_change_done_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"description":      types.StringType,
				"next_button_text": types.StringType,
				"title":            types.StringType,
			},
		},
		"username_change_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"cancel_button_text": types.StringType,
				"description":        types.StringType,
				"next_button_text":   types.StringType,
				"title":              types.StringType,
				"username_label":     types.StringType,
			},
		},
		"verify_mfa_otp_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"code_label":       types.StringType,
				"description":      types.StringType,
				"next_button_text": types.StringType,
				"title":            types.StringType,
			},
		},
		"verify_mfa_u2f_text": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"description":         types.StringType,
				"error_retry":         types.StringType,
				"not_supported":       types.StringType,
				"title":               types.StringType,
				"validate_token_text": types.StringType,
			},
		},
	}

	// Initialize attributes map
	attrs := make(map[string]attr.Value)

	// Process email_verification_done_text
	if obj.EmailVerificationDoneText == nil {
		attrs["email_verification_done_text"] = types.ObjectNull(attrTypes["email_verification_done_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.EmailVerificationDoneText
		nestedAttrs := map[string]attr.Value{
			"cancel_button_text": types.StringValue(o.CancelButtonText),
			"description":        types.StringValue(o.Description),
			"login_button_text":  types.StringValue(o.LoginButtonText),
			"next_button_text":   types.StringValue(o.NextButtonText),
			"title":              types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["email_verification_done_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["email_verification_done_text"] = nestedObj
	}

	// Process email_verification_text
	if obj.EmailVerificationText == nil {
		attrs["email_verification_text"] = types.ObjectNull(attrTypes["email_verification_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.EmailVerificationText
		nestedAttrs := map[string]attr.Value{
			"code_label":        types.StringValue(o.CodeLabel),
			"description":       types.StringValue(o.Description),
			"next_button_text":  types.StringValue(o.NextButtonText),
			"resend_button_text": types.StringValue(o.ResendButtonText),
			"title":             types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["email_verification_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["email_verification_text"] = nestedObj
	}

	// Process external_registration_user_overview_text
	if obj.ExternalRegistrationUserOverviewText == nil {
		attrs["external_registration_user_overview_text"] = types.ObjectNull(attrTypes["external_registration_user_overview_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.ExternalRegistrationUserOverviewText
		nestedAttrs := map[string]attr.Value{
			"back_button_text":      types.StringValue(o.BackButtonText),
			"description":           types.StringValue(o.Description),
			"email_label":           types.StringValue(o.EmailLabel),
			"firstname_label":       types.StringValue(o.FirstnameLabel),
			"language_label":        types.StringValue(o.LanguageLabel),
			"lastname_label":        types.StringValue(o.LastnameLabel),
			"next_button_text":      types.StringValue(o.NextButtonText),
			"nickname_label":        types.StringValue(o.NicknameLabel),
			"phone_label":           types.StringValue(o.PhoneLabel),
			"privacy_confirm":       types.StringValue(o.PrivacyConfirm),
			"privacy_link_text":     types.StringValue(o.PrivacyLinkText),
			"title":                 types.StringValue(o.Title),
			"tos_and_privacy_label": types.StringValue(o.TosAndPrivacyLabel),
			"tos_confirm":           types.StringValue(o.TosConfirm),
			"tos_link_text":         types.StringValue(o.TosLinkText),
			"username_label":        types.StringValue(o.UsernameLabel),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["external_registration_user_overview_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["external_registration_user_overview_text"] = nestedObj
	}

	// Process external_user_not_found_text
	if obj.ExternalUserNotFoundText == nil {
		attrs["external_user_not_found_text"] = types.ObjectNull(attrTypes["external_user_not_found_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.ExternalUserNotFoundText
		nestedAttrs := map[string]attr.Value{
			"auto_register_button_text": types.StringValue(o.AutoRegisterButtonText),
			"description":               types.StringValue(o.Description),
			"link_button_text":          types.StringValue(o.LinkButtonText),
			"privacy_confirm":           types.StringValue(o.PrivacyConfirm),
			"privacy_link_text":         types.StringValue(o.PrivacyLinkText),
			"title":                     types.StringValue(o.Title),
			"tos_and_privacy_label":     types.StringValue(o.TosAndPrivacyLabel),
			"tos_confirm":               types.StringValue(o.TosConfirm),
			"tos_link_text":             types.StringValue(o.TosLinkText),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["external_user_not_found_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["external_user_not_found_text"] = nestedObj
	}

	// Process footer_text
	if obj.FooterText == nil {
		attrs["footer_text"] = types.ObjectNull(attrTypes["footer_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.FooterText
		nestedAttrs := map[string]attr.Value{
			"help":           types.StringValue(o.Help),
			"privacy_policy": types.StringValue(o.PrivacyPolicy),
			"support_email":  types.StringValue(o.SupportEmail),
			"tos":            types.StringValue(o.Tos),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["footer_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["footer_text"] = nestedObj
	}

	// Process init_mfa_done_text
	if obj.InitMfaDoneText == nil {
		attrs["init_mfa_done_text"] = types.ObjectNull(attrTypes["init_mfa_done_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.InitMfaDoneText
		nestedAttrs := map[string]attr.Value{
			"cancel_button_text": types.StringValue(o.CancelButtonText),
			"description":        types.StringValue(o.Description),
			"next_button_text":   types.StringValue(o.NextButtonText),
			"title":              types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["init_mfa_done_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["init_mfa_done_text"] = nestedObj
	}

	// Process init_mfa_otp_text
	if obj.InitMfaOtpText == nil {
		attrs["init_mfa_otp_text"] = types.ObjectNull(attrTypes["init_mfa_otp_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.InitMfaOtpText
		nestedAttrs := map[string]attr.Value{
			"cancel_button_text": types.StringValue(o.CancelButtonText),
			"code_label":         types.StringValue(o.CodeLabel),
			"description":        types.StringValue(o.Description),
			"description_otp":    types.StringValue(o.DescriptionOtp),
			"next_button_text":   types.StringValue(o.NextButtonText),
			"secret_label":       types.StringValue(o.SecretLabel),
			"title":              types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["init_mfa_otp_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["init_mfa_otp_text"] = nestedObj
	}

	// Process init_mfa_prompt_text
	if obj.InitMfaPromptText == nil {
		attrs["init_mfa_prompt_text"] = types.ObjectNull(attrTypes["init_mfa_prompt_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.InitMfaPromptText
		nestedAttrs := map[string]attr.Value{
			"description":       types.StringValue(o.Description),
			"next_button_text":  types.StringValue(o.NextButtonText),
			"otp_option":        types.StringValue(o.OtpOption),
			"skip_button_text":  types.StringValue(o.SkipButtonText),
			"title":             types.StringValue(o.Title),
			"u2f_option":        types.StringValue(o.U2FOption),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["init_mfa_prompt_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["init_mfa_prompt_text"] = nestedObj
	}

	// Process init_mfa_u2f_text
	if obj.InitMfaU2FText == nil {
		attrs["init_mfa_u2f_text"] = types.ObjectNull(attrTypes["init_mfa_u2f_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.InitMfaU2FText
		nestedAttrs := map[string]attr.Value{
			"description":              types.StringValue(o.Description),
			"error_retry":              types.StringValue(o.ErrorRetry),
			"not_supported":            types.StringValue(o.NotSupported),
			"register_token_button_text": types.StringValue(o.RegisterTokenButtonText),
			"title":                    types.StringValue(o.Title),
			"token_name_label":         types.StringValue(o.TokenNameLabel),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["init_mfa_u2f_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["init_mfa_u2f_text"] = nestedObj
	}

	// Process init_password_done_text
	if obj.InitPasswordDoneText == nil {
		attrs["init_password_done_text"] = types.ObjectNull(attrTypes["init_password_done_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.InitPasswordDoneText
		nestedAttrs := map[string]attr.Value{
			"cancel_button_text": types.StringValue(o.CancelButtonText),
			"description":        types.StringValue(o.Description),
			"next_button_text":   types.StringValue(o.NextButtonText),
			"title":              types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["init_password_done_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["init_password_done_text"] = nestedObj
	}

	// Process init_password_text
	if obj.InitPasswordText == nil {
		attrs["init_password_text"] = types.ObjectNull(attrTypes["init_password_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.InitPasswordText
		nestedAttrs := map[string]attr.Value{
			"code_label":              types.StringValue(o.CodeLabel),
			"description":             types.StringValue(o.Description),
			"new_password_confirm_label": types.StringValue(o.NewPasswordConfirmLabel),
			"new_password_label":      types.StringValue(o.NewPasswordLabel),
			"next_button_text":        types.StringValue(o.NextButtonText),
			"title":                   types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["init_password_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["init_password_text"] = nestedObj
	}

	// Process select_account_text
	if obj.SelectAccountText == nil {
		attrs["select_account_text"] = types.ObjectNull(attrTypes["select_account_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.SelectAccountText
		nestedAttrs := map[string]attr.Value{
			"description":                types.StringValue(o.Description),
			"description_linking_process": types.StringValue(o.DescriptionLinkingProcess),
			"other_user":                 types.StringValue(o.OtherUser),
			"session_state_active":       types.StringValue(o.SessionStateActive),
			"session_state_inactive":     types.StringValue(o.SessionStateInactive),
			"title":                      types.StringValue(o.Title),
			"title_linking_process":      types.StringValue(o.TitleLinkingProcess),
			"user_must_be_member_of_org": types.StringValue(o.UserMustBeMemberOfOrg),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["select_account_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["select_account_text"] = nestedObj
	}

	// Process success_login_text
	if obj.SuccessLoginText == nil {
		attrs["success_login_text"] = types.ObjectNull(attrTypes["success_login_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.SuccessLoginText
		nestedAttrs := map[string]attr.Value{
			"auto_redirect_description": types.StringValue(o.AutoRedirectDescription),
			"next_button_text":          types.StringValue(o.NextButtonText),
			"redirected_description":    types.StringValue(o.RedirectedDescription),
			"title":                     types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["success_login_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["success_login_text"] = nestedObj
	}

	// Process username_change_done_text
	if obj.UsernameChangeDoneText == nil {
		attrs["username_change_done_text"] = types.ObjectNull(attrTypes["username_change_done_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.UsernameChangeDoneText
		nestedAttrs := map[string]attr.Value{
			"description":      types.StringValue(o.Description),
			"next_button_text": types.StringValue(o.NextButtonText),
			"title":            types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["username_change_done_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["username_change_done_text"] = nestedObj
	}

	// Process username_change_text
	if obj.UsernameChangeText == nil {
		attrs["username_change_text"] = types.ObjectNull(attrTypes["username_change_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.UsernameChangeText
		nestedAttrs := map[string]attr.Value{
			"cancel_button_text": types.StringValue(o.CancelButtonText),
			"description":        types.StringValue(o.Description),
			"next_button_text":   types.StringValue(o.NextButtonText),
			"title":              types.StringValue(o.Title),
			"username_label":     types.StringValue(o.UsernameLabel),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["username_change_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["username_change_text"] = nestedObj
	}

	// Process verify_mfa_otp_text
	if obj.VerifyMfaOtpText == nil {
		attrs["verify_mfa_otp_text"] = types.ObjectNull(attrTypes["verify_mfa_otp_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.VerifyMfaOtpText
		nestedAttrs := map[string]attr.Value{
			"code_label":       types.StringValue(o.CodeLabel),
			"description":      types.StringValue(o.Description),
			"next_button_text": types.StringValue(o.NextButtonText),
			"title":            types.StringValue(o.Title),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["verify_mfa_otp_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["verify_mfa_otp_text"] = nestedObj
	}

	// Process verify_mfa_u2f_text
	if obj.VerifyMfaU2FText == nil {
		attrs["verify_mfa_u2f_text"] = types.ObjectNull(attrTypes["verify_mfa_u2f_text"].(types.ObjectType).AttrTypes)
	} else {
		o := obj.VerifyMfaU2FText
		nestedAttrs := map[string]attr.Value{
			"description":         types.StringValue(o.Description),
			"error_retry":         types.StringValue(o.ErrorRetry),
			"not_supported":       types.StringValue(o.NotSupported),
			"title":               types.StringValue(o.Title),
			"validate_token_text": types.StringValue(o.ValidateTokenText),
		}
		nestedObj, objDiags := types.ObjectValue(attrTypes["verify_mfa_u2f_text"].(types.ObjectType).AttrTypes, nestedAttrs)
		diags.Append(objDiags...)
		attrs["verify_mfa_u2f_text"] = nestedObj
	}

	// Create the new object
	newObj, objDiags := types.ObjectValue(attrTypes, attrs)
	diags.Append(objDiags...)
	if diags.HasError() {
		return diags
	}

	// Assign the new object to the pointer
	*tf = newObj

	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() diag.Severity {
	return diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attributes", d.Path)
}

func (d attrReadMissingDiag) Equal(o diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() diag.Severity {
	return diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() diag.Severity {
	return diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() diag.Severity {
	return diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() diag.Severity {
	return diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}